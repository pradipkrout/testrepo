openapi: 3.0.0
info:
  title: Petstore
  version: 1.0.6
servers:
- url: https://petstore.swagger.io/v2
- url: http://petstore.swagger.io/v2
paths:
  /pet:
    put:
      description: Update an existing pet
      operationId: updatePet
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
    post:
      description: Add a new pet to the store
      operationId: addPet
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        405:
          description: Invalid input
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                title: response200
                type: array
                xml:
                  attribute: false
                  wrapped: false
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /pet/findByTags:
    get:
      description: Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                title: response200
                type: array
                xml:
                  attribute: false
                  wrapped: false
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
  /pet/{petId}:
    get:
      description: Returns a single pet
      operationId: getPetById
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
    post:
      description: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/x-www-form-urlencoded
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  title: name
                  type: string
                  description: Updated name of the pet
                status:
                  title: status
                  type: string
                  description: Updated status of the pet
        required: true
      responses:
        405:
          description: Invalid input
    delete:
      description: Deletes a pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
    parameters:
    - name: petId
      in: path
      description: ID of pet to return
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
  /pet/{petId}/uploadImage:
    post:
      description: uploads an image
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  title: additionalMetadata
                  type: string
                  description: Additional data to pass to server
                file:
                  title: file
                  type: string
                  description: file to upload
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    parameters:
    - name: petId
      in: path
      description: ID of pet to return
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int64
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
  /user/createWithArray:
    post:
      description: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              title: body
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
  /user/createWithList:
    post:
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              title: body
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
  /user/{username}:
    get:
      description: Get user by user name
      operationId: getUserByName
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
    parameters:
    - name: username
      in: path
      description: The name that needs to be fetched. Use user1 for testing.
      required: true
      style: simple
      explode: false
      schema:
        type: string
  /user/login:
    get:
      description: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: string
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                title: response200
                type: string
                xml:
                  name: response200
                  attribute: false
                  wrapped: false
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      description: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful operation
  /store/order:
    post:
      description: Place an order for a pet
      operationId: placeOrder
      parameters:
      - name: Content-Type
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
  /store/order/{orderId}:
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    parameters:
    - name: orderId
      in: path
      description: ID of pet that needs to be fetched
      required: true
      style: simple
      explode: false
      schema:
        maximum: 10
        minimum: 1
        type: integer
        format: int64
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                title: response200
                required:
                - type
                type: object
                properties:
                  type:
                    type: integer
                additionalProperties: true
      security:
      - api_key: []
components:
  schemas:
    ApiResponse:
      title: ApiResponse
      type: object
      properties:
        code:
          title: code
          type: integer
          format: int32
        type:
          title: type
          type: string
        message:
          title: message
          type: string
    Category:
      title: Category
      type: object
      properties:
        id:
          title: id
          type: integer
          format: int64
        name:
          title: name
          type: string
      xml:
        name: Category
    Pet:
      title: Pet
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          title: id
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          title: name
          type: string
        photoUrls:
          title: photoUrls
          type: array
          xml:
            attribute: false
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          title: tags
          type: array
          xml:
            attribute: false
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          title: status
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    Tag:
      title: Tag
      type: object
      properties:
        id:
          title: id
          type: integer
          format: int64
        name:
          title: name
          type: string
      xml:
        name: Tag
    Order:
      title: Order
      type: object
      properties:
        id:
          title: id
          type: integer
          format: int64
        petId:
          title: petId
          type: integer
          format: int64
        quantity:
          title: quantity
          type: integer
          format: int32
        shipDate:
          title: shipDate
          type: string
          format: date-time
        status:
          title: status
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          title: complete
          type: boolean
      xml:
        name: Order
    User:
      title: User
      type: object
      properties:
        id:
          title: id
          type: integer
          format: int64
        username:
          title: username
          type: string
        firstName:
          title: firstName
          type: string
        lastName:
          title: lastName
          type: string
        email:
          title: email
          type: string
        password:
          title: password
          type: string
        phone:
          title: phone
          type: string
        userStatus:
          title: userStatus
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  links: {}
  callbacks: {}
